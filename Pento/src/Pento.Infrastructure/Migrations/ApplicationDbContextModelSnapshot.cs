// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pento.Infrastructure;

#nullable disable

namespace Pento.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pento.Domain.BlogPosts.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("PostType")
                        .HasColumnType("integer")
                        .HasColumnName("post_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_blog_posts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_blog_posts_user_id");

                    b.ToTable("blog_posts", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_post_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_moderated");

                    b.Property<DateTime?>("ModeratedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moderated_on_utc");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("BlogPostId")
                        .HasDatabaseName("ix_comments_blog_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.GiveawayClaims.GiveawayClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClaimantId")
                        .HasColumnType("uuid")
                        .HasColumnName("claimant_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("GiveawayPostId")
                        .HasColumnType("uuid")
                        .HasColumnName("giveaway_post_id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_giveaway_claims");

                    b.HasIndex("ClaimantId")
                        .HasDatabaseName("ix_giveaway_claims_claimant_id");

                    b.HasIndex("GiveawayPostId")
                        .HasDatabaseName("ix_giveaway_claims_giveaway_post_id");

                    b.ToTable("giveaway_claims", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.GiveawayPosts.GiveawayPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_info");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("PickupEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pickup_end_date");

                    b.Property<int>("PickupOption")
                        .HasColumnType("integer")
                        .HasColumnName("pickup_option");

                    b.Property<DateTime?>("PickupStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pickup_start_date");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StorageItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_item_id");

                    b.Property<string>("TitleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title_description");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_giveaway_posts");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_giveaway_posts_storage_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_giveaway_posts_user_id");

                    b.ToTable("giveaway_posts", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.StorageItems.StorageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_storage_item");

                    b.ToTable("storage_item", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Users.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.HasKey("Code")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "users:read"
                        },
                        new
                        {
                            Code = "users:update"
                        },
                        new
                        {
                            Code = "household:view"
                        },
                        new
                        {
                            Code = "household:update"
                        },
                        new
                        {
                            Code = "household:transferOwner"
                        },
                        new
                        {
                            Code = "members:read"
                        },
                        new
                        {
                            Code = "members:invite"
                        },
                        new
                        {
                            Code = "members:update"
                        },
                        new
                        {
                            Code = "members:remove"
                        },
                        new
                        {
                            Code = "storage:read"
                        },
                        new
                        {
                            Code = "storage:manage"
                        },
                        new
                        {
                            Code = "pantry:read"
                        },
                        new
                        {
                            Code = "pantry:create"
                        },
                        new
                        {
                            Code = "pantry:update"
                        },
                        new
                        {
                            Code = "pantry:consume"
                        },
                        new
                        {
                            Code = "pantry:discard"
                        },
                        new
                        {
                            Code = "grocery:read"
                        },
                        new
                        {
                            Code = "grocery:manage"
                        },
                        new
                        {
                            Code = "mealplan:read"
                        },
                        new
                        {
                            Code = "mealplan:manage"
                        },
                        new
                        {
                            Code = "recipes:read"
                        },
                        new
                        {
                            Code = "recipes:manage"
                        },
                        new
                        {
                            Code = "giveaways:read"
                        },
                        new
                        {
                            Code = "giveaways:manage"
                        },
                        new
                        {
                            Code = "permissions:manage"
                        },
                        new
                        {
                            Code = "permissions:overrides"
                        });
                });

            modelBuilder.Entity("Pento.Domain.Users.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Administrator"
                        },
                        new
                        {
                            Name = "Household Admin"
                        },
                        new
                        {
                            Name = "Power Member"
                        },
                        new
                        {
                            Name = "Grocery Runner"
                        },
                        new
                        {
                            Name = "Meal Planner"
                        },
                        new
                        {
                            Name = "Storage Manager"
                        },
                        new
                        {
                            Name = "Basic Member"
                        });
                });

            modelBuilder.Entity("Pento.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Pento.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<string>("PermissionCode")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_code");

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("PermissionCode", "RoleName")
                        .HasName("pk_role_permissions");

                    b.HasIndex("RoleName")
                        .HasDatabaseName("ix_role_permissions_role_name");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionCode = "users:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "users:update",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "household:view",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "household:update",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "household:transferOwner",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "members:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "members:invite",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "members:update",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "members:remove",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "storage:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "storage:manage",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "pantry:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "pantry:create",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "pantry:update",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "pantry:consume",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "pantry:discard",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "grocery:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "grocery:manage",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "mealplan:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "mealplan:manage",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "recipes:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "recipes:manage",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "giveaways:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "giveaways:manage",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "permissions:manage",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "permissions:overrides",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "household:view",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "household:update",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "household:transferOwner",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "members:read",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "members:invite",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "members:update",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "members:remove",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "permissions:manage",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "permissions:overrides",
                            RoleName = "Household Admin"
                        },
                        new
                        {
                            PermissionCode = "household:view",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "household:update",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "storage:read",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "storage:manage",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "pantry:read",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "pantry:create",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "pantry:update",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "pantry:consume",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "pantry:discard",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "grocery:read",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "grocery:manage",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "mealplan:read",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "mealplan:manage",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "recipes:read",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "recipes:manage",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "giveaways:read",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "giveaways:manage",
                            RoleName = "Power Member"
                        },
                        new
                        {
                            PermissionCode = "grocery:read",
                            RoleName = "Grocery Runner"
                        },
                        new
                        {
                            PermissionCode = "grocery:manage",
                            RoleName = "Grocery Runner"
                        },
                        new
                        {
                            PermissionCode = "mealplan:read",
                            RoleName = "Meal Planner"
                        },
                        new
                        {
                            PermissionCode = "mealplan:manage",
                            RoleName = "Meal Planner"
                        },
                        new
                        {
                            PermissionCode = "recipes:read",
                            RoleName = "Meal Planner"
                        },
                        new
                        {
                            PermissionCode = "recipes:manage",
                            RoleName = "Meal Planner"
                        },
                        new
                        {
                            PermissionCode = "storage:read",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "storage:manage",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "pantry:read",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "pantry:create",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "pantry:update",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "pantry:consume",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "pantry:discard",
                            RoleName = "Storage Manager"
                        },
                        new
                        {
                            PermissionCode = "household:view",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "members:read",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "storage:read",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "pantry:read",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "grocery:read",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "mealplan:read",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "recipes:read",
                            RoleName = "Basic Member"
                        },
                        new
                        {
                            PermissionCode = "giveaways:read",
                            RoleName = "Basic Member"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesName")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RolesName", "UserId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.BlogPosts.BlogPost", b =>
                {
                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_blog_posts_user_user_id");
                });

            modelBuilder.Entity("Pento.Domain.Comments.Comment", b =>
                {
                    b.HasOne("Pento.Domain.BlogPosts.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_blog_posts_blog_post_id");

                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_user_user_id");
                });

            modelBuilder.Entity("Pento.Domain.GiveawayClaims.GiveawayClaim", b =>
                {
                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ClaimantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_claims_user_claimant_id");

                    b.HasOne("Pento.Domain.GiveawayPosts.GiveawayPost", null)
                        .WithMany()
                        .HasForeignKey("GiveawayPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_claims_giveaway_post_giveaway_post_id");
                });

            modelBuilder.Entity("Pento.Domain.GiveawayPosts.GiveawayPost", b =>
                {
                    b.HasOne("Pento.Domain.StorageItems.StorageItem", null)
                        .WithMany()
                        .HasForeignKey("StorageItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_posts_storage_item_storage_item_id");

                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_posts_user_user_id");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Pento.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_code");

                    b.HasOne("Pento.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_name");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Pento.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_name");

                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_user_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
