// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pento.Infrastructure;

#nullable disable

namespace Pento.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251031085232_RecipeMedia")]
    partial class RecipeMedia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pento.Domain.BlogPosts.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PostType")
                        .HasColumnType("integer")
                        .HasColumnName("post_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_blog_posts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_blog_posts_user_id");

                    b.ToTable("blog_posts", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_post_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_moderated");

                    b.Property<DateTime?>("ModeratedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moderated_on_utc");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("BlogPostId")
                        .HasDatabaseName("ix_comments_blog_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Compartments.Compartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_id");

                    b.HasKey("Id")
                        .HasName("pk_compartments");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_compartments_household_id");

                    b.HasIndex("StorageId")
                        .HasDatabaseName("ix_compartments_storage_id");

                    b.ToTable("compartments", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.FoodItems.FoodItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("compartment_id");

                    b.Property<string>("CustomName")
                        .HasColumnType("text")
                        .HasColumnName("custom_name");

                    b.Property<DateTime>("ExpirationDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date_utc");

                    b.Property<Guid>("FoodRefId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_ref_id");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("SourceItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_item_id");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_food_items");

                    b.HasIndex("CompartmentId")
                        .HasDatabaseName("ix_food_items_compartment_id");

                    b.HasIndex("FoodRefId")
                        .HasDatabaseName("ix_food_items_food_ref_id");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_food_items_household_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_food_items_unit_id");

                    b.ToTable("food_items", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.FoodReferences.FoodReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("added_by");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("barcode");

                    b.Property<string>("Brand")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_type");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("food_category_id");

                    b.Property<string>("FoodGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("food_group");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("PublishedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_on_utc");

                    b.Property<int>("TypicalShelfLifeDays_Freezer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("typical_shelf_life_days_freezer");

                    b.Property<int>("TypicalShelfLifeDays_Fridge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("typical_shelf_life_days_fridge");

                    b.Property<int>("TypicalShelfLifeDays_Pantry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("typical_shelf_life_days_pantry");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<string>("UsdaId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usda_id");

                    b.HasKey("Id")
                        .HasName("pk_food_references");

                    b.ToTable("food_references", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.GiveawayClaims.GiveawayClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClaimantId")
                        .HasColumnType("uuid")
                        .HasColumnName("claimant_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("GiveawayPostId")
                        .HasColumnType("uuid")
                        .HasColumnName("giveaway_post_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_giveaway_claims");

                    b.HasIndex("ClaimantId")
                        .HasDatabaseName("ix_giveaway_claims_claimant_id");

                    b.HasIndex("GiveawayPostId")
                        .HasDatabaseName("ix_giveaway_claims_giveaway_post_id");

                    b.ToTable("giveaway_claims", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.GiveawayPosts.GiveawayPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_info");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("FoodItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_item_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("PickupEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pickup_end_date");

                    b.Property<int>("PickupOption")
                        .HasColumnType("integer")
                        .HasColumnName("pickup_option");

                    b.Property<DateTime?>("PickupStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pickup_start_date");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TitleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title_description");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_giveaway_posts");

                    b.HasIndex("FoodItemId")
                        .HasDatabaseName("ix_giveaway_posts_food_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_giveaway_posts_user_id");

                    b.ToTable("giveaway_posts", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.GroceryLists.GroceryList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_grocery_list");

                    b.ToTable("grocery_list", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Households.Household", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("invite_code");

                    b.Property<DateTime?>("InviteCodeExpirationUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invite_code_expiration_utc");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_households");

                    b.ToTable("households", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.MealPlans.MealPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MealType")
                        .HasColumnType("integer")
                        .HasColumnName("meal_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.Property<DateOnly>("ScheduledDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_date");

                    b.Property<int>("Servings")
                        .HasColumnType("integer")
                        .HasColumnName("servings");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_meal_plans");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_meal_plans_household_id");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_meal_plans_recipe_id");

                    b.ToTable("meal_plans", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.PossibleUnits.PossibleUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("FoodRefId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_ref_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_possible_units");

                    b.HasIndex("FoodRefId", "UnitId")
                        .IsUnique()
                        .HasDatabaseName("ix_possible_units_food_ref_id_unit_id");

                    b.ToTable("possible_units", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.RecipeDirections.RecipeDirection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_recipe_directions");

                    b.ToTable("recipe_directions", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.RecipeIngredients.RecipeIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("FoodRefId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_ref_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("notes");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_recipe_ingredients");

                    b.HasIndex("FoodRefId")
                        .HasDatabaseName("ix_recipe_ingredients_food_ref_id");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_recipe_ingredients_recipe_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_recipe_ingredients_unit_id");

                    b.ToTable("recipe_ingredients", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.RecipeMedia.RecipeMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mime_type");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_recipe_media");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_recipe_media_recipe_id");

                    b.ToTable("recipe_media", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Recipes.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("CaloriesPerServing")
                        .HasColumnType("integer")
                        .HasColumnName("calories_per_serving");

                    b.Property<int?>("CookTimeMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("cook_time_minutes");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("PrepTimeMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("prep_time_minutes");

                    b.Property<int?>("Servings")
                        .HasColumnType("integer")
                        .HasColumnName("servings");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_recipes");

                    b.ToTable("recipes", null, t =>
                        {
                            t.Property("CookTimeMinutes")
                                .HasColumnName("recipe_cook_time_minutes");

                            t.Property("PrepTimeMinutes")
                                .HasColumnName("recipe_prep_time_minutes");
                        });
                });

            modelBuilder.Entity("Pento.Domain.Roles.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Name")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Administrator",
                            Type = "System"
                        },
                        new
                        {
                            Name = "Household Head",
                            Type = "Household"
                        },
                        new
                        {
                            Name = "Power Member",
                            Type = "Household"
                        },
                        new
                        {
                            Name = "Grocery Shopper",
                            Type = "Household"
                        },
                        new
                        {
                            Name = "Meal Planner",
                            Type = "Household"
                        },
                        new
                        {
                            Name = "Pantry Manager",
                            Type = "Household"
                        },
                        new
                        {
                            Name = "Errand Runner",
                            Type = "Household"
                        });
                });

            modelBuilder.Entity("Pento.Domain.Storages.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_storages");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_storages_household_id");

                    b.ToTable("storages", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Units.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("abbreviation");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("ToBaseFactor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("to_base_factor");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<Guid?>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_users_household_id");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Pento.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesName")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RolesName", "UserId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Pento.Domain.BlogPosts.BlogPost", b =>
                {
                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_blog_posts_user_user_id");
                });

            modelBuilder.Entity("Pento.Domain.Comments.Comment", b =>
                {
                    b.HasOne("Pento.Domain.BlogPosts.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_blog_posts_blog_post_id");

                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_user_user_id");
                });

            modelBuilder.Entity("Pento.Domain.Compartments.Compartment", b =>
                {
                    b.HasOne("Pento.Domain.Households.Household", null)
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_compartments_household_household_id");

                    b.HasOne("Pento.Domain.Storages.Storage", null)
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_compartments_storage_storage_id");
                });

            modelBuilder.Entity("Pento.Domain.FoodItems.FoodItem", b =>
                {
                    b.HasOne("Pento.Domain.Compartments.Compartment", null)
                        .WithMany()
                        .HasForeignKey("CompartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_items_compartments_compartment_id");

                    b.HasOne("Pento.Domain.FoodReferences.FoodReference", null)
                        .WithMany()
                        .HasForeignKey("FoodRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_items_food_references_food_ref_id");

                    b.HasOne("Pento.Domain.Households.Household", null)
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_items_household_household_id");

                    b.HasOne("Pento.Domain.Units.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_items_unit_unit_id");
                });

            modelBuilder.Entity("Pento.Domain.GiveawayClaims.GiveawayClaim", b =>
                {
                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ClaimantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_claims_user_claimant_id");

                    b.HasOne("Pento.Domain.GiveawayPosts.GiveawayPost", null)
                        .WithMany()
                        .HasForeignKey("GiveawayPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_claims_giveaway_post_giveaway_post_id");
                });

            modelBuilder.Entity("Pento.Domain.GiveawayPosts.GiveawayPost", b =>
                {
                    b.HasOne("Pento.Domain.FoodItems.FoodItem", null)
                        .WithMany()
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_posts_food_items_food_item_id");

                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_giveaway_posts_user_user_id");
                });

            modelBuilder.Entity("Pento.Domain.MealPlans.MealPlan", b =>
                {
                    b.HasOne("Pento.Domain.Households.Household", null)
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_meal_plans_households_household_id");

                    b.HasOne("Pento.Domain.Recipes.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meal_plans_recipe_recipe_id");
                });

            modelBuilder.Entity("Pento.Domain.RecipeIngredients.RecipeIngredient", b =>
                {
                    b.HasOne("Pento.Domain.FoodReferences.FoodReference", null)
                        .WithMany()
                        .HasForeignKey("FoodRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_ingredients_food_references_food_ref_id");

                    b.HasOne("Pento.Domain.Recipes.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_ingredients_recipes_recipe_id");

                    b.HasOne("Pento.Domain.Units.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_ingredients_unit_unit_id");
                });

            modelBuilder.Entity("Pento.Domain.RecipeMedia.RecipeMedia", b =>
                {
                    b.HasOne("Pento.Domain.Recipes.Recipe", null)
                        .WithMany("Media")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_media_recipe_recipe_id");
                });

            modelBuilder.Entity("Pento.Domain.Recipes.Recipe", b =>
                {
                    b.OwnsOne("Pento.Domain.Recipes.TimeRequirement", "RecipeTime", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CookTimeMinutes")
                                .HasColumnType("integer")
                                .HasColumnName("cook_time_minutes");

                            b1.Property<int>("PrepTimeMinutes")
                                .HasColumnType("integer")
                                .HasColumnName("prep_time_minutes");

                            b1.HasKey("RecipeId");

                            b1.ToTable("recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId")
                                .HasConstraintName("fk_recipes_recipes_id");
                        });

                    b.Navigation("RecipeTime")
                        .IsRequired();
                });

            modelBuilder.Entity("Pento.Domain.Storages.Storage", b =>
                {
                    b.HasOne("Pento.Domain.Households.Household", null)
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storages_households_household_id");
                });

            modelBuilder.Entity("Pento.Domain.Users.User", b =>
                {
                    b.HasOne("Pento.Domain.Households.Household", null)
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_households_household_id");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Pento.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_name");

                    b.HasOne("Pento.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_user_user_id");
                });

            modelBuilder.Entity("Pento.Domain.Recipes.Recipe", b =>
                {
                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
